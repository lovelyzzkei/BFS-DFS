#include<iostream>
#include<queue>
using namespace std;

int m;	// 가로
int n;		// 세로
bool visited[1010][1010];		// 방문했는지 체크
int check[1010][1010];		// 토마토의 정보를 담고 일수를 저장
int dir[4][2] = { {-1, 0}, {1, 0}, {0, 1}, {0, -1} };		// 네 방향 계산을 위한 배열. 위, 아래, 오른쪽, 왼쪽
queue<pair<int, int> >q;		// bfs 수행을 위한 큐

bool isInside(int a, int b);		// 해당 좌표가 상자 안에 있는 좌표인지 확인
int bfs();

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);

	// 상자의 가로와 세로를 받음. 그리고 토마토의 정보도 받음
	// tomato의 정보가 1이면 미리 받아놓음.
	cin >> m >> n;
	int tomato;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			cin >> tomato;
			check[i][j] = tomato;
			if (tomato == 1) {
				q.push(make_pair(i, j));
			}
		}
	}

	// check 배열에 대한 bfs를 수행
	cout << bfs() << "\n";
	return 0;
}

bool isInside(int a, int b) {
	return (a > 0 && a <= n) && (b > 0 && b <= m);
}

int bfs() {
	while (!q.empty()) {
		int cur_y = q.front().first;
		int cur_x = q.front().second;
		q.pop();

		// 현재 위치에 대하여 좌우 네 방향 탐색
		for (int i = 0; i < 4; i++) {
			int next_y = cur_y + dir[i][0];
			int next_x = cur_x + dir[i][1];
			// 현재 위치에서 인접한 좌표가 상자 안에 있고, 아직 방문하지 않은 위치이며, 익지 않은 토마토이면 방문처리하고 익음 처리 하여 큐에 다시 삽입
			if (isInside(next_y, next_x) && !visited[next_y][next_x] && check[next_y][next_x] == 0) {
				visited[next_y][next_x] = true;
				check[next_y][next_x] = check[cur_y][cur_x] + 1;
				q.push(make_pair(next_y, next_x));
			}
		}
	}

	// check 배열을 검사하면서 만약 익지 않은 토마토가 있다면 -1을 출력, 그렇지 않다면 배열에서 가장 큰 값 출력
	int max = -1;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			if (check[i][j] == 0) {
				return -1;
			}
			if (check[i][j] > max) {
				max = check[i][j];
			}
		}
	}
	return max - 1;
}
#include<iostream>
#include<string>
#include<queue>
using namespace std;

int n;		// 행
int m;	// 열
bool map[101][101];	// 해당 지점을 지나 왔는지 체크
int check[101][101];	// 지나온 길을 기록. 몇번째 만에 도달했는지
int dir[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };		// 방향 저장 아래, 위, 오른쪽, 왼쪽

bool isInside(int a, int b);	// 해당 좌표가 지도 안에 있는 좌표인지 확인
int bfs();	// 미로 탐색을 위한 너비 우선 탐색 함수

int main() {
	cin.tie(NULL);
	ios::sync_with_stdio(false);

	// 행과 열을 받음
	cin >> n >> m;

	// 각 줄을 일단 스트링 형태로 받은 이후 쪼개어서 정수 형태로 넣음
	string booleanChecker;
	for (int i = 1; i <= n; i++) {
		cin >> booleanChecker;
		for (int j = 1; j <= m; j++) {
			if (booleanChecker[j - 1] - '0' == 1) {
				map[i][j] = true;
			}
		}
	}

	// bfs를 수행
	cout << bfs() << "\n";
	return 0;
}

// a와 b가 map 안에 있으면 true값 반환
bool isInside(int a, int b) {	
	return (a > 0 && a <= n) && (b > 0 && b <= m);
}

int bfs() {
	int cur_y = 1, cur_x = 1;

	// bfs수행을 위한 큐를 하나 선언
	queue<pair<int, int> > q;
	check[cur_y][cur_x] = 1;		// 처음 스타트 지점은 1
	q.push(make_pair(cur_y, cur_x));

	while (!q.empty()) {
		cur_y = q.front().first;
		cur_x = q.front().second;
		q.pop();

		// 도착지점에 도달했으면 반복문 종료
		if (cur_y == n && cur_x == m) {
			break;
		}

		// 네 방향 모두 탐색
		for (int i = 0; i < 4; i++) {
			int next_y = cur_y + dir[i][0];
			int next_x = cur_x + dir[i][1];
			// 가려는 지점이 맵 안에 있고, 아직 방문하지 않았고, true값이면 이동
			if (isInside(next_y, next_x) && check[next_y][next_x] == 0 && map[next_y][next_x]) {
				check[next_y][next_x] = check[cur_y][cur_x] + 1;
				q.push(make_pair(next_y, next_x));
			}
		}
	}
	return check[n][m];
}